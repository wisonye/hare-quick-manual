* FFI: Calling C functions

** Function

You need to 2 things for calling any C functions:

- Declare the C function signature in hare data type.

- Link to the corresponding C libraries via =-L= (where to search the linking libraries)and =-l= (link to the given library name) to =hare run/build/test=.

Example:

#+BEGIN_SRC hare
  //
  // Declare the C function signature in hare data type.
  //
  @symbol("printf") fn c_printf(format: *const c::char, ...) int;

  //
  //
  //
  export fn main() void = {
          const int_value = 10;
          const float_value = 18.1234f64; // `%f` only accept `f64`!!!
          const string_value = "Hello hare:)";

          c_printf(c::unterminatedstr("int_value: %d, float_value: %.2f, string_value: %s"),
                  int_value,
                  float_value,
                  c::unterminatedstr(string_value));
  };
#+END_SRC

Then, remember to link to =libc= by using =-lc=:

#+BEGIN_SRC bash
  HAREPATH=~/hare/temp/src:/usr/local/share/hare/stdlib hare run -lc ~/hare/temp/src/main.ha

  # int_value: 10, float_value: 18.12, string_value: Hello hare:)⏎ 
#+END_SRC


Pay attentions:

- Linking to any C libraries will also implicitly link to =libc=, which will use a libc-oriented Hare runtime that, for example, performs memory allocations via libc’s =malloc=. This will also enable the =+libc= build tag.

- It is recommended to identify the correct linker flags with =pkg-config=. =hare= does not interpret C compiler flags, so the user must take care to only add the compatible linker flags:

  #+BEGIN_SRC bash
    hare build $(pkg-config --libs-only-L --libs-only-l LIB_NAME_HERE)
  #+END_SRC


** Extern global variable

You can declare an extern global variable that comes from any linking libraries like this:

#+BEGIN_SRC hare
  // @symbol("EXTERN_VAR_HERE") YOUR_HARE_VAR_HERE: VAR_TYPE_HERE
  export let @symbol("stdscr") stdscr: nullable *WINDOW;
#+END_SRC

